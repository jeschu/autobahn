/*
Autobahn App API

Was passiert auf Deutschlands Bundesstraßen? API für aktuelle Verwaltungsdaten zu Baustellen, Staus und Ladestationen. Außerdem Zugang zu Verkehrsüberwachungskameras und vielen weiteren Datensätzen. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Closures struct for Closures
type Closures struct {
	Closure []Closure `json:"closure,omitempty"`
}

// NewClosures instantiates a new Closures object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClosures() *Closures {
	this := Closures{}
	return &this
}

// NewClosuresWithDefaults instantiates a new Closures object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClosuresWithDefaults() *Closures {
	this := Closures{}
	return &this
}

// GetClosure returns the Closure field value if set, zero value otherwise.
func (o *Closures) GetClosure() []Closure {
	if o == nil || isNil(o.Closure) {
		var ret []Closure
		return ret
	}
	return o.Closure
}

// GetClosureOk returns a tuple with the Closure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Closures) GetClosureOk() ([]Closure, bool) {
	if o == nil || isNil(o.Closure) {
    return nil, false
	}
	return o.Closure, true
}

// HasClosure returns a boolean if a field has been set.
func (o *Closures) HasClosure() bool {
	if o != nil && !isNil(o.Closure) {
		return true
	}

	return false
}

// SetClosure gets a reference to the given []Closure and assigns it to the Closure field.
func (o *Closures) SetClosure(v []Closure) {
	o.Closure = v
}

func (o Closures) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Closure) {
		toSerialize["closure"] = o.Closure
	}
	return json.Marshal(toSerialize)
}

type NullableClosures struct {
	value *Closures
	isSet bool
}

func (v NullableClosures) Get() *Closures {
	return v.value
}

func (v *NullableClosures) Set(val *Closures) {
	v.value = val
	v.isSet = true
}

func (v NullableClosures) IsSet() bool {
	return v.isSet
}

func (v *NullableClosures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClosures(val *Closures) *NullableClosures {
	return &NullableClosures{value: val, isSet: true}
}

func (v NullableClosures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClosures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


