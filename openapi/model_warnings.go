/*
Autobahn App API

Was passiert auf Deutschlands Bundesstraßen? API für aktuelle Verwaltungsdaten zu Baustellen, Staus und Ladestationen. Außerdem Zugang zu Verkehrsüberwachungskameras und vielen weiteren Datensätzen. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Warnings struct for Warnings
type Warnings struct {
	Warning []Warning `json:"warning,omitempty"`
}

// NewWarnings instantiates a new Warnings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWarnings() *Warnings {
	this := Warnings{}
	return &this
}

// NewWarningsWithDefaults instantiates a new Warnings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWarningsWithDefaults() *Warnings {
	this := Warnings{}
	return &this
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *Warnings) GetWarning() []Warning {
	if o == nil || isNil(o.Warning) {
		var ret []Warning
		return ret
	}
	return o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Warnings) GetWarningOk() ([]Warning, bool) {
	if o == nil || isNil(o.Warning) {
    return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *Warnings) HasWarning() bool {
	if o != nil && !isNil(o.Warning) {
		return true
	}

	return false
}

// SetWarning gets a reference to the given []Warning and assigns it to the Warning field.
func (o *Warnings) SetWarning(v []Warning) {
	o.Warning = v
}

func (o Warnings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Warning) {
		toSerialize["warning"] = o.Warning
	}
	return json.Marshal(toSerialize)
}

type NullableWarnings struct {
	value *Warnings
	isSet bool
}

func (v NullableWarnings) Get() *Warnings {
	return v.value
}

func (v *NullableWarnings) Set(val *Warnings) {
	v.value = val
	v.isSet = true
}

func (v NullableWarnings) IsSet() bool {
	return v.isSet
}

func (v *NullableWarnings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarnings(val *Warnings) *NullableWarnings {
	return &NullableWarnings{value: val, isSet: true}
}

func (v NullableWarnings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarnings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


