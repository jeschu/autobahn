/*
Autobahn App API

Was passiert auf Deutschlands Bundesstraßen? API für aktuelle Verwaltungsdaten zu Baustellen, Staus und Ladestationen. Außerdem Zugang zu Verkehrsüberwachungskameras und vielen weiteren Datensätzen. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DisplayType the model 'DisplayType'
type DisplayType string

// List of DisplayType
const (
	ROADWORKS DisplayType = "ROADWORKS"
	WEBCAM DisplayType = "WEBCAM"
	PARKING DisplayType = "PARKING"
	WARNING DisplayType = "WARNING"
	WEIGHT_LIMIT_35 DisplayType = "WEIGHT_LIMIT_35"
	CLOSURE DisplayType = "CLOSURE"
	CLOSURE_ENTRY_EXIT DisplayType = "CLOSURE_ENTRY_EXIT"
	STRONG_ELECTRIC_CHARGING_STATION DisplayType = "STRONG_ELECTRIC_CHARGING_STATION"
	SHORT_TERM_ROADWORKS DisplayType = "SHORT_TERM_ROADWORKS"
	ELECTRIC_CHARGING_STATION DisplayType = "ELECTRIC_CHARGING_STATION"
)

// All allowed values of DisplayType enum
var AllowedDisplayTypeEnumValues = []DisplayType{
	"ROADWORKS",
	"WEBCAM",
	"PARKING",
	"WARNING",
	"WEIGHT_LIMIT_35",
	"CLOSURE",
	"CLOSURE_ENTRY_EXIT",
	"STRONG_ELECTRIC_CHARGING_STATION",
	"SHORT_TERM_ROADWORKS",
	"ELECTRIC_CHARGING_STATION",
}

func (v *DisplayType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DisplayType(value)
	for _, existing := range AllowedDisplayTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DisplayType", value)
}

// NewDisplayTypeFromValue returns a pointer to a valid DisplayType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDisplayTypeFromValue(v string) (*DisplayType, error) {
	ev := DisplayType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DisplayType: valid values are %v", v, AllowedDisplayTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DisplayType) IsValid() bool {
	for _, existing := range AllowedDisplayTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DisplayType value
func (v DisplayType) Ptr() *DisplayType {
	return &v
}

type NullableDisplayType struct {
	value *DisplayType
	isSet bool
}

func (v NullableDisplayType) Get() *DisplayType {
	return v.value
}

func (v *NullableDisplayType) Set(val *DisplayType) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayType) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayType(val *DisplayType) *NullableDisplayType {
	return &NullableDisplayType{value: val, isSet: true}
}

func (v NullableDisplayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

