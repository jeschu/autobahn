/*
Autobahn App API

Was passiert auf Deutschlands Bundesstraßen? API für aktuelle Verwaltungsdaten zu Baustellen, Staus und Ladestationen. Außerdem Zugang zu Verkehrsüberwachungskameras und vielen weiteren Datensätzen. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WebcamAllOf struct for WebcamAllOf
type WebcamAllOf struct {
	Operator *string `json:"operator,omitempty"`
	Imageurl *string `json:"imageurl,omitempty"`
	Linkurl *string `json:"linkurl,omitempty"`
}

// NewWebcamAllOf instantiates a new WebcamAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebcamAllOf() *WebcamAllOf {
	this := WebcamAllOf{}
	return &this
}

// NewWebcamAllOfWithDefaults instantiates a new WebcamAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebcamAllOfWithDefaults() *WebcamAllOf {
	this := WebcamAllOf{}
	return &this
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *WebcamAllOf) GetOperator() string {
	if o == nil || isNil(o.Operator) {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebcamAllOf) GetOperatorOk() (*string, bool) {
	if o == nil || isNil(o.Operator) {
    return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *WebcamAllOf) HasOperator() bool {
	if o != nil && !isNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *WebcamAllOf) SetOperator(v string) {
	o.Operator = &v
}

// GetImageurl returns the Imageurl field value if set, zero value otherwise.
func (o *WebcamAllOf) GetImageurl() string {
	if o == nil || isNil(o.Imageurl) {
		var ret string
		return ret
	}
	return *o.Imageurl
}

// GetImageurlOk returns a tuple with the Imageurl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebcamAllOf) GetImageurlOk() (*string, bool) {
	if o == nil || isNil(o.Imageurl) {
    return nil, false
	}
	return o.Imageurl, true
}

// HasImageurl returns a boolean if a field has been set.
func (o *WebcamAllOf) HasImageurl() bool {
	if o != nil && !isNil(o.Imageurl) {
		return true
	}

	return false
}

// SetImageurl gets a reference to the given string and assigns it to the Imageurl field.
func (o *WebcamAllOf) SetImageurl(v string) {
	o.Imageurl = &v
}

// GetLinkurl returns the Linkurl field value if set, zero value otherwise.
func (o *WebcamAllOf) GetLinkurl() string {
	if o == nil || isNil(o.Linkurl) {
		var ret string
		return ret
	}
	return *o.Linkurl
}

// GetLinkurlOk returns a tuple with the Linkurl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebcamAllOf) GetLinkurlOk() (*string, bool) {
	if o == nil || isNil(o.Linkurl) {
    return nil, false
	}
	return o.Linkurl, true
}

// HasLinkurl returns a boolean if a field has been set.
func (o *WebcamAllOf) HasLinkurl() bool {
	if o != nil && !isNil(o.Linkurl) {
		return true
	}

	return false
}

// SetLinkurl gets a reference to the given string and assigns it to the Linkurl field.
func (o *WebcamAllOf) SetLinkurl(v string) {
	o.Linkurl = &v
}

func (o WebcamAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !isNil(o.Imageurl) {
		toSerialize["imageurl"] = o.Imageurl
	}
	if !isNil(o.Linkurl) {
		toSerialize["linkurl"] = o.Linkurl
	}
	return json.Marshal(toSerialize)
}

type NullableWebcamAllOf struct {
	value *WebcamAllOf
	isSet bool
}

func (v NullableWebcamAllOf) Get() *WebcamAllOf {
	return v.value
}

func (v *NullableWebcamAllOf) Set(val *WebcamAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableWebcamAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableWebcamAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebcamAllOf(val *WebcamAllOf) *NullableWebcamAllOf {
	return &NullableWebcamAllOf{value: val, isSet: true}
}

func (v NullableWebcamAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebcamAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


