/*
Autobahn App API

Was passiert auf Deutschlands Bundesstraßen? API für aktuelle Verwaltungsdaten zu Baustellen, Staus und Ladestationen. Außerdem Zugang zu Verkehrsüberwachungskameras und vielen weiteren Datensätzen. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ParkingLorries struct for ParkingLorries
type ParkingLorries struct {
	ParkingLorry []ParkingLorry `json:"parking_lorry,omitempty"`
}

// NewParkingLorries instantiates a new ParkingLorries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParkingLorries() *ParkingLorries {
	this := ParkingLorries{}
	return &this
}

// NewParkingLorriesWithDefaults instantiates a new ParkingLorries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParkingLorriesWithDefaults() *ParkingLorries {
	this := ParkingLorries{}
	return &this
}

// GetParkingLorry returns the ParkingLorry field value if set, zero value otherwise.
func (o *ParkingLorries) GetParkingLorry() []ParkingLorry {
	if o == nil || isNil(o.ParkingLorry) {
		var ret []ParkingLorry
		return ret
	}
	return o.ParkingLorry
}

// GetParkingLorryOk returns a tuple with the ParkingLorry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParkingLorries) GetParkingLorryOk() ([]ParkingLorry, bool) {
	if o == nil || isNil(o.ParkingLorry) {
    return nil, false
	}
	return o.ParkingLorry, true
}

// HasParkingLorry returns a boolean if a field has been set.
func (o *ParkingLorries) HasParkingLorry() bool {
	if o != nil && !isNil(o.ParkingLorry) {
		return true
	}

	return false
}

// SetParkingLorry gets a reference to the given []ParkingLorry and assigns it to the ParkingLorry field.
func (o *ParkingLorries) SetParkingLorry(v []ParkingLorry) {
	o.ParkingLorry = v
}

func (o ParkingLorries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ParkingLorry) {
		toSerialize["parking_lorry"] = o.ParkingLorry
	}
	return json.Marshal(toSerialize)
}

type NullableParkingLorries struct {
	value *ParkingLorries
	isSet bool
}

func (v NullableParkingLorries) Get() *ParkingLorries {
	return v.value
}

func (v *NullableParkingLorries) Set(val *ParkingLorries) {
	v.value = val
	v.isSet = true
}

func (v NullableParkingLorries) IsSet() bool {
	return v.isSet
}

func (v *NullableParkingLorries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParkingLorries(val *ParkingLorries) *NullableParkingLorries {
	return &NullableParkingLorries{value: val, isSet: true}
}

func (v NullableParkingLorries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParkingLorries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


