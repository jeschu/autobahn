/*
Autobahn App API

Was passiert auf Deutschlands Bundesstraßen? API für aktuelle Verwaltungsdaten zu Baustellen, Staus und Ladestationen. Außerdem Zugang zu Verkehrsüberwachungskameras und vielen weiteren Datensätzen. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Webcams struct for Webcams
type Webcams struct {
	Webcam []Webcam `json:"webcam,omitempty"`
}

// NewWebcams instantiates a new Webcams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebcams() *Webcams {
	this := Webcams{}
	return &this
}

// NewWebcamsWithDefaults instantiates a new Webcams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebcamsWithDefaults() *Webcams {
	this := Webcams{}
	return &this
}

// GetWebcam returns the Webcam field value if set, zero value otherwise.
func (o *Webcams) GetWebcam() []Webcam {
	if o == nil || isNil(o.Webcam) {
		var ret []Webcam
		return ret
	}
	return o.Webcam
}

// GetWebcamOk returns a tuple with the Webcam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webcams) GetWebcamOk() ([]Webcam, bool) {
	if o == nil || isNil(o.Webcam) {
    return nil, false
	}
	return o.Webcam, true
}

// HasWebcam returns a boolean if a field has been set.
func (o *Webcams) HasWebcam() bool {
	if o != nil && !isNil(o.Webcam) {
		return true
	}

	return false
}

// SetWebcam gets a reference to the given []Webcam and assigns it to the Webcam field.
func (o *Webcams) SetWebcam(v []Webcam) {
	o.Webcam = v
}

func (o Webcams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Webcam) {
		toSerialize["webcam"] = o.Webcam
	}
	return json.Marshal(toSerialize)
}

type NullableWebcams struct {
	value *Webcams
	isSet bool
}

func (v NullableWebcams) Get() *Webcams {
	return v.value
}

func (v *NullableWebcams) Set(val *Webcams) {
	v.value = val
	v.isSet = true
}

func (v NullableWebcams) IsSet() bool {
	return v.isSet
}

func (v *NullableWebcams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebcams(val *Webcams) *NullableWebcams {
	return &NullableWebcams{value: val, isSet: true}
}

func (v NullableWebcams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebcams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


