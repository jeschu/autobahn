/*
Autobahn App API

Was passiert auf Deutschlands Bundesstraßen? API für aktuelle Verwaltungsdaten zu Baustellen, Staus und Ladestationen. Außerdem Zugang zu Verkehrsüberwachungskameras und vielen weiteren Datensätzen. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// RoadEventAllOf struct for RoadEventAllOf
type RoadEventAllOf struct {
	StartTimestamp *time.Time `json:"startTimestamp,omitempty"`
}

// NewRoadEventAllOf instantiates a new RoadEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoadEventAllOf() *RoadEventAllOf {
	this := RoadEventAllOf{}
	return &this
}

// NewRoadEventAllOfWithDefaults instantiates a new RoadEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoadEventAllOfWithDefaults() *RoadEventAllOf {
	this := RoadEventAllOf{}
	return &this
}

// GetStartTimestamp returns the StartTimestamp field value if set, zero value otherwise.
func (o *RoadEventAllOf) GetStartTimestamp() time.Time {
	if o == nil || isNil(o.StartTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoadEventAllOf) GetStartTimestampOk() (*time.Time, bool) {
	if o == nil || isNil(o.StartTimestamp) {
    return nil, false
	}
	return o.StartTimestamp, true
}

// HasStartTimestamp returns a boolean if a field has been set.
func (o *RoadEventAllOf) HasStartTimestamp() bool {
	if o != nil && !isNil(o.StartTimestamp) {
		return true
	}

	return false
}

// SetStartTimestamp gets a reference to the given time.Time and assigns it to the StartTimestamp field.
func (o *RoadEventAllOf) SetStartTimestamp(v time.Time) {
	o.StartTimestamp = &v
}

func (o RoadEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.StartTimestamp) {
		toSerialize["startTimestamp"] = o.StartTimestamp
	}
	return json.Marshal(toSerialize)
}

type NullableRoadEventAllOf struct {
	value *RoadEventAllOf
	isSet bool
}

func (v NullableRoadEventAllOf) Get() *RoadEventAllOf {
	return v.value
}

func (v *NullableRoadEventAllOf) Set(val *RoadEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRoadEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRoadEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoadEventAllOf(val *RoadEventAllOf) *NullableRoadEventAllOf {
	return &NullableRoadEventAllOf{value: val, isSet: true}
}

func (v NullableRoadEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoadEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


