/*
Autobahn App API

Was passiert auf Deutschlands Bundesstraßen? API für aktuelle Verwaltungsdaten zu Baustellen, Staus und Ladestationen. Außerdem Zugang zu Verkehrsüberwachungskameras und vielen weiteren Datensätzen. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ElectricChargingStations struct for ElectricChargingStations
type ElectricChargingStations struct {
	ElectricChargingStation []ElectricChargingStation `json:"electric_charging_station,omitempty"`
}

// NewElectricChargingStations instantiates a new ElectricChargingStations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElectricChargingStations() *ElectricChargingStations {
	this := ElectricChargingStations{}
	return &this
}

// NewElectricChargingStationsWithDefaults instantiates a new ElectricChargingStations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElectricChargingStationsWithDefaults() *ElectricChargingStations {
	this := ElectricChargingStations{}
	return &this
}

// GetElectricChargingStation returns the ElectricChargingStation field value if set, zero value otherwise.
func (o *ElectricChargingStations) GetElectricChargingStation() []ElectricChargingStation {
	if o == nil || isNil(o.ElectricChargingStation) {
		var ret []ElectricChargingStation
		return ret
	}
	return o.ElectricChargingStation
}

// GetElectricChargingStationOk returns a tuple with the ElectricChargingStation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElectricChargingStations) GetElectricChargingStationOk() ([]ElectricChargingStation, bool) {
	if o == nil || isNil(o.ElectricChargingStation) {
    return nil, false
	}
	return o.ElectricChargingStation, true
}

// HasElectricChargingStation returns a boolean if a field has been set.
func (o *ElectricChargingStations) HasElectricChargingStation() bool {
	if o != nil && !isNil(o.ElectricChargingStation) {
		return true
	}

	return false
}

// SetElectricChargingStation gets a reference to the given []ElectricChargingStation and assigns it to the ElectricChargingStation field.
func (o *ElectricChargingStations) SetElectricChargingStation(v []ElectricChargingStation) {
	o.ElectricChargingStation = v
}

func (o ElectricChargingStations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ElectricChargingStation) {
		toSerialize["electric_charging_station"] = o.ElectricChargingStation
	}
	return json.Marshal(toSerialize)
}

type NullableElectricChargingStations struct {
	value *ElectricChargingStations
	isSet bool
}

func (v NullableElectricChargingStations) Get() *ElectricChargingStations {
	return v.value
}

func (v *NullableElectricChargingStations) Set(val *ElectricChargingStations) {
	v.value = val
	v.isSet = true
}

func (v NullableElectricChargingStations) IsSet() bool {
	return v.isSet
}

func (v *NullableElectricChargingStations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElectricChargingStations(val *ElectricChargingStations) *NullableElectricChargingStations {
	return &NullableElectricChargingStations{value: val, isSet: true}
}

func (v NullableElectricChargingStations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElectricChargingStations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


